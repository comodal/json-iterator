plugins {
  id 'java-library'
  id 'maven-publish'
  id "com.jfrog.bintray"
  id "pl.allegro.tech.build.axion-release"
  id "org.javamodularity.moduleplugin"
  id "me.champeau.gradle.jmh"
  id "io.morethan.jmhreport"
//  id "io.freefair.github.package-registry-maven-publish"
}

sourceCompatibility = JavaVersion.toVersion("${project.findProperty('targetJava') ?: '13'}")

scmVersion {
  tag.prefix = ''
  repository.pushTagsOnly = true
}

project.version = scmVersion.version
project.group = 'systems.comodal'

ext {
  desc = 'Json Parser'
  bintrayOrg = 'comodal'
  bintrayRepo = 'libraries'
  vcsUrl = 'https://github.com/comodal/json-iterator'
  moduleName = 'systems.comodal.json_iterator'
  bench = project.properties['bench'] ?: 'BenchCharFieldStyles'
}

//github {
//  slug = 'comodal/json-iterator'
//  username = System.getenv('GITHUB_USER')
//  token = System.getenv('GITHUB_TOKEN')
//}

repositories {
  jcenter()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:+'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
  testImplementation 'org.openjdk.jmh:jmh-core:+'
  testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:+'

  jmh 'org.openjdk.jmh:jmh-core:+'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:+'
}

jmh {
  // ./gradlew -q --console=plain --no-daemon jmh -Pbench=BenchStringFieldStyles
  if (project.properties['bench.graal'] == 'true') {
    jvmArgsPrepend = ['-XX:+AlwaysPreTouch', '-XX:-UseBiasedLocking', '-XX:+DisableExplicitGC', '-XX:+UseNUMA', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseJVMCICompiler']
    resultsFile = project.parent.file("benchmark-results/$bench/jmh_report/graal_results.json")
  } else {
    jvmArgsPrepend = ['-XX:+AlwaysPreTouch', '-XX:-UseBiasedLocking', '-XX:+DisableExplicitGC', '-XX:+UseNUMA']
    resultsFile = project.parent.file("benchmark-results/$bench/jmh_report/results.json")
  }
  warmupIterations = 3
  warmup = '4s'
  iterations = 5
  timeOnIteration = '5s'
  fork = 1
  include = [project.bench]
  jmhVersion = '+'
  resultFormat = 'JSON'
  includeTests = false
}

jmhReport {
  jmhResultPath = jmh.resultsFile
  def reportDir = project.parent.file("benchmark-results/$bench/jmh_report/")
  jmhReportOutput = reportDir
  if (!reportDir.exists()) {
    reportDir.mkdirs()
  }
}

tasks.jmh.finalizedBy tasks.jmhReport

sourceSets {
  test {
    java {
      srcDirs = ['src/test/java', 'src/jmh/java']
    }
    resources {
      srcDirs = ['src/test/resources', 'src/jmh/resources']
    }
  }
}

compileTestJava {
  moduleOptions {
    addModules = ['org.junit.jupiter.params', 'jmh.core']
    addReads = [
        'systems.comodal.json_iterator': 'org.junit.jupiter.params,jmh.core']
  }
}

test {
  moduleOptions {
    runOnClasspath = true
  }
  useJUnitPlatform()
  maxParallelForks = 4
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams true
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier.set('javadoc')
}

javadoc {
  options.addBooleanOption('html5', true)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId project.name
      version = project.version
      pom {
        name = project.name
        description = project.desc
        url = project.vcsUrl
        licenses {
          license {
            name = 'MIT License'
            url = 'https://github.com/comodal/json-iterator/blob/master/LICENSE'
          }
        }
        developers {
          developer {
            email = 'james.p.edwards42@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:comodal/json-iterator.git'
          url = project.vcsUrl
        }
      }
    }
  }
}

bintray {
  user = project.findProperty("bintrayUser") ?: System.getenv('BINTRAY_USER')
  key = project.findProperty("bintrayApiKey") ?: System.getenv('BINTRAY_API_KEY')
  publications = ['mavenJava']
  pkg {
    userOrg = project.bintrayOrg
    repo = project.bintrayRepo
    name = project.name
    desc = project.desc
    vcsUrl = project.vcsUrl
    websiteUrl = project.vcsUrl
    issueTrackerUrl = project.vcsUrl + '/issues'
    licenses = ["MIT License"]
    publish = true
    version {
      name = project.version
      vcsTag = project.name + '-' + project.version
      gpg {
        sign = true
        passphrase = project.findProperty("bintrayGPGPassphrase") ?: System.getenv('BINTRAY_GPG_PASSPHRASE')
      }
    }
  }
}

// ./gradlew :json-iterator:genParser --args='<style>[ifelse, nlogn, nhashn] <unexpected_field_behavior>[throw, skip] <tab_size>[2, 4, etc.] <camelCaseRootName> <file_or_url>(asdf.json, https://)'
// ./gradlew :json-iterator:genParser --args='ifelse skip 2 assets gen.json'
task genParser(type: JavaExec) {
  workingDir = project.getRootDir()
  classpath = sourceSets.jmh.getRuntimeClasspath()
  main = 'systems.comodal.jsoniter.generate.JIParserGeneratorEntryPoint'
}

// https://docs.gradle.org/5.6.2/userguide/building_java_projects.html#sec:java_cross_compilation
def javaHomePath = new File("${project.findProperty('javaHome') ?: System.getenv('JAVA_HOME')}")
def javaExecutables = [:].withDefault { execName ->
  def executable = new File(javaHomePath, "bin/${execName}")
  assert executable.exists(): "There is no ${execName} executable in ${javaHomePath}/bin"
  executable
}

tasks.withType(AbstractCompile) {
  options.with {
    fork = true
    forkOptions.javaHome = javaHomePath
  }
}
tasks.withType(Javadoc) {
  executable = javaExecutables.javadoc
}
tasks.withType(Test) {
  executable = javaExecutables.java
}
tasks.withType(JavaExec) {
  executable = javaExecutables.java
}
