plugins {
  id 'java-library'
  id 'maven-publish'
  id "com.jfrog.bintray"
  id "pl.allegro.tech.build.axion-release"
  id "org.javamodularity.moduleplugin"
  id "me.champeau.gradle.jmh"
  id "io.morethan.jmhreport"
}

sourceCompatibility = JavaVersion.VERSION_12

scmVersion {
  tag.prefix = ''
  repository.pushTagsOnly = true
}

project.version = scmVersion.version
project.group = 'systems.comodal'

ext {
  desc = 'Json Parser'
  bintrayOrg = 'comodal'
  bintrayRepo = 'libraries'
  vcsUrl = 'https://github.com/comodal/json-iterator'
  moduleName = 'systems.comodal.json_iterator'
  bench = 'BenchCharFieldStyles'
  jmhResultsFile = 'tmp.results.json'
}

repositories {
  jcenter()
}

dependencies {
  components.all(DependenciesAlignmentRule)

  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:+'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
  testImplementation 'org.openjdk.jmh:jmh-core:+'
  testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:+'

  jmh 'org.openjdk.jmh:jmh-core:+'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:+'
}

jmh {
  include = [project.bench]
  jmhVersion = '+'
//  jvmArgsPrepend = ['-XX:+UnlockExperimentalVMOptions', '-XX:+UseJVMCICompiler']
  fork = 1
  resultFormat = 'JSON'
  resultsFile = project.parent.file("benchmark-results/$bench/$jmhResultsFile")
  includeTests = false
}

jmhReport {
  jmhResultPath = jmh.resultsFile
  def reportDir = project.parent.file("benchmark-results/$bench/jmh_report/")
  jmhReportOutput = reportDir
  if(!reportDir.exists()) {
    reportDir.mkdirs()
  }
}

tasks.jmh.finalizedBy tasks.jmhReport

sourceSets {
  test {
    java {
      srcDirs = ['src/test/java', 'src/jmh/java']
    }
    resources {
      srcDirs = ['src/test/resources', 'src/jmh/resources']
    }
  }
}

test {
  moduleOptions {
    runOnClasspath = true
  }
  useJUnitPlatform()
  maxParallelForks = 4
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams true
  }
}


final class DependenciesAlignmentRule implements ComponentMetadataRule {
  void execute(ComponentMetadataContext ctx) {
    ctx.details.with {
      if (id.group.startsWith("org.junit.jupiter")) {
        belongsTo("org.junit.jupiter:junit-platform:${id.version}")
      } else if (id.group.startsWith("org.openjdk.jmh")) {
        belongsTo("org.openjdk.jmh:jmh-platform:${id.version}")
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      groupId project.group
      artifactId project.name
      version = project.version
    }
  }
}

bintray {
  user = project.hasProperty("bintrayUser") ? bintrayUser : System.getenv('BINTRAY_USER')
  key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
  publications = ['mavenJava']
  pkg {
    userOrg = project.bintrayOrg
    repo = project.bintrayRepo
    name = project.name
    desc = project.desc
    vcsUrl = project.vcsUrl
    websiteUrl = project.vcsUrl
    issueTrackerUrl = project.vcsUrl + '/issues'
    licenses = ["MIT License"]
    publish = true
    version {
      name = project.version
      vcsTag = project.name + '-' + project.version
      gpg {
        sign = true
        passphrase = project.hasProperty("bintrayGPGPassphrase") ? bintrayGPGPassphrase : System.getenv('BINTRAY_GPG_PASSPHRASE')
      }
    }
  }
}