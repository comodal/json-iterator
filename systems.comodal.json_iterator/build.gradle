plugins {
  id 'java-library'
  id 'maven-publish'
  id 'pl.allegro.tech.build.axion-release'
  id 'me.champeau.gradle.jmh'
  id 'io.morethan.jmhreport'
}

scmVersion {
  tag.prefix = ''
  repository.pushTagsOnly = true
}

project.version = scmVersion.version
project.group = 'systems.comodal'

ext {
  desc = 'Json Parser'
  vcsUrl = 'https://github.com/comodal/json-iterator'
  moduleName = 'systems.comodal.json_iterator'
  bench = project.findProperty('bench') ?: 'BenchCharFieldStyles'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(project.findProperty('targetJava') as Integer ?: 17)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:+'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
  testImplementation 'org.openjdk.jmh:jmh-core:+'
  testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:+'

  jmh 'org.openjdk.jmh:jmh-core:+'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:+'
  jmh 'org.junit.jupiter:junit-jupiter-engine:+'
  jmh 'org.openjdk.jmh:jmh-core:+'
  jmh 'org.openjdk.jmh:jmh-generator-annprocess:+'
}

jmh {
  // ./gradlew -q --console=plain --no-daemon jmh -Pbench=BenchStringFieldStyles
  resultsFile = project.parent.file("benchmark-results/$bench/jmh_report/results.json")
  warmupIterations = 3
  warmup = '4s'
  iterations = 5
  timeOnIteration = '5s'
  fork = 1
  include = [project.bench]
  jmhVersion = '+'
  resultFormat = 'JSON'
  includeTests = false
}

jmhReport {
  jmhResultPath = jmh.resultsFile
  def reportDir = project.parent.file("benchmark-results/$bench/jmh_report/")
  jmhReportOutput = reportDir
  if (!reportDir.exists()) {
    reportDir.mkdirs()
  }
}

tasks.jmh.finalizedBy tasks.jmhReport

sourceSets {
  test {
    java {
      srcDirs = ['src/test/java', 'src/jmh/java']
    }
    resources {
      srcDirs = ['src/test/resources', 'src/jmh/resources']
    }
  }
}

test {
  useJUnitPlatform()
  maxParallelForks = 4
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams true
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier.set('javadoc')
}

javadoc {
  options.addBooleanOption('html5', true)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId project.name
      version = project.version
      pom {
        name = project.name
        description = project.desc
        url = project.vcsUrl
        licenses {
          license {
            name = 'MIT License'
            url = 'https://github.com/comodal/json-iterator/blob/master/LICENSE'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:comodal/json-iterator.git'
          url = project.vcsUrl
        }
      }
    }
  }
  repositories {
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/comodal/json-iterator"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}

// ./gradlew :json-iterator:genParser --args='<style>[ifelse, nlogn, nhashn] <unexpected_field_behavior>[throw, skip] <tab_size>[2, 4, etc.] <camelCaseRootName> <file_or_url>(asdf.json, https://)'
// ./gradlew :json-iterator:genParser --args='ifelse skip 2 assets gen.json'
task genParser(type: JavaExec) {
  workingDir = project.getRootDir()
  classpath = sourceSets.jmh.getRuntimeClasspath()
  mainClass = 'systems.comodal.jsoniter.generate.JIParserGeneratorEntryPoint'
}